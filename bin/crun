#!/usr/bin/env bash

# Runs a interactive docker container linked to the current directory
# With this, there's no need for node (nor grunt, bower, etc.) to be installed locally.
# This simplifies preparation of developer machines, and continuous integration scripts.
#
# USAGE
#     bin/crun [image] [command]

set -e
set -o pipefail

image=$1
if [ -z "$image" ]; then
  echo >&2 "Usage: crun [image] [command]"
  exit 1
fi
shift

if ! docker inspect --format="{{.Id}}" $image > /dev/null; then
  echo "Pulling $image image..."
  docker pull $image
fi

BASH_PATH=$(dirname "${BASH_SOURCE[0]}")
if hash realpath 2> /dev/null; then
  REPO_ROOT=$(realpath "${BASH_PATH}/../")
else
  REPO_ROOT=$(readlink -f "${BASH_PATH}/../")
fi
CONTAINER_HOME=$REPO_ROOT
STANDARD_PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"

SPECIAL_OPTS="--rm"
if [ "$NO_DOCKER_RM" ]; then
  SPECIAL_OPTS=""
fi

set -x
docker run -v $REPO_ROOT:$CONTAINER_HOME -v /tmp:/tmp -v /var/run/docker.sock:/var/run/docker.sock \
  -e HOME=$CONTAINER_HOME -w $CONTAINER_HOME \
  -e PATH="./node_modules/.bin/:./node_modules/grunt-cli/bin/:$STANDARD_PATH" \
  $DOCKER_OPTS $SPECIAL_OPTS -ti --sig-proxy=true "$image" "$@"
